Office Hours Topics:

    reviewing week 13:
    Abstraction
    Polymorphism

----------------------------------------------------------------------------------------

Shopping [Abstraction, Polymorphism]

    Use some printing related to the class as the implementation of the methods

    Create an abstract class Shopping
        - Declare two abstract methods:
            buyItem(), returnItem()

    Create an interface Shipping
        - Declare an abstract methods:
            shipItem()

    Create a concrete class Target
        - Make the class final
        - Inherit Shopping and implement Shipping
        - implement all abstract methods

    Create an abstract class OnlineShopping
        - Inherit Shopping and implement Shipping
        - Does not need to implement any abstract methods
        - Declare an abstract methods:
            viewCart()

    Create a concrete class Amazon
        - Make the class final
        - Inherit OnlineShopping and implement all abstract methods

    Create an interface AllowUsersToSell
        - Declare an abstract method:
            uploadProduct()

    Create a concrete class EBay
        - Make the class final
        - Inherit OnlineShopping and implements interface AllowUsersToSell interface
        - Implement all abstract methods

    Create a class Warehouse
    create a main method and create Target, Amazon, & EBay object to test the methods
    also use different polymorphic references to check what is accessible

----------------------------------------------------------------------------------------

Movies [Abstraction, Polymorphism]

    - Create a final class Movie
        create the following instance variables:
            title, rating(out of 5), duration(minutes), year

        create a constructor to initialize all the variables

        encapsulate the class

        create a toString to print the information of the Movie

    - Create an interface PlayMovie
        create an abstract method: playMovie(Movie) | Movie object as parameter

    - Create a final class Cinema
        create the following instance variables:
            location, number of theaters, List of Movies

        create a constructor to initialize all the variables

        implement the PlayMovie & implement the playMovie method to say: "Moving Starting, please grab your popcorn and turn your phones off"

        create a method buyTicket(Movie):
            print how much a movie ticket is. The cost is based on the rating of the movie. If it is a 5 the movie costs 25, if it is 3 or 4 it cost 20 and any other rating is 15

        create a toString that will display the information about the Cinema and which Movies are available to watch

    - Create an interface HasSubscription
        create an abstract method subscribe()

    - Create an abstract class StreamingSite
        implement the PlayMovie & HasSubcription interfaces - don't need to implement the methods

        create the following instance variables:
            url, subscription amount, movies available(int)

        create a constructor to initialize all the variables

        create an abstract method:
            pause()

    - Create a final class Netflix
        inherit the StreamingSite class and implement all the methods

    - Create a final class Amazon
        inherit the StreamingSite class and implement all the methods

    - Create a final class Hulu
        inherit the StreamingSite class and implement all the methods

    - Create a final class User
        create a main method and create Movie, Cinema, Netflix, Amazon, & Hulu objects
        create a List of all the StreamingSites used. Then subscribe to them all.
            extra: you can also pause the movie
        create a List of PlayMovie and add multiple different Cinema and StreamingSite objects. Then play your favorite movie on all of the options

        create a method to determine which StreamingSite is the best for you.
            parameter: StreamingSite
            return: StreamingSite

            options to check if the site is for you:
                subscription is the cheapest
                or has the most number of movies

        create a List of Cinema in your area. A new movie came out and you want to support it so you buy a ticket for that movie from every Cinema in your area.

        extra: think about other ways you could use polymorphism to interact with these objects and play around with the code

----------------------------------------------------------------------------------------

